Nebenläufige Programmierung - Übungszettel 3
============================================

Abgegeben von:    Martin Griesser(csap2497)
Gruppe:           Gruppe 4 (Martin Griesser, Peter Kirk)
Gelöste Aufgaben: 1,2,3

Aufgabe 1:
==========

	Ausführung: java -jar ex1.jar

a)	Der Konstruktor der Klasse 'ExpensiveObject' führt Operationen aus, welche unterschiedlich
	viel Zeit in Anspruch nehmen (zählt bis zu einem zufälligen Wert zw. 0 u. 1000000). Wenn nun ein
	Thread auf die Instanz zugreifen will, diese aber noch nicht existiert, wird der Konstruktor auf-
	gerufen. Inzwischen kann ein anderer Thread auch auf die getInstance() methode zugreifen. Da die
	Erstellung der Instanz aber unter Umständen noch nicht abgeschlossen ist, versucht dieser Thread
	auch, eine Instanz zu erstellen. Danach existieren 2 unterschiedliche Instanzen und das Prinzip 
	des Singleton-Patterns wurde verletzt!
	
b)	Das Problem kann gelöst werden, indem einfach die Methode getInstance() als synchronized deklariert
	wird. Nun werden alle anderen Aufrufe blockiert, bis die Instanziierung abgeschlossen ist und der
	erste aufrufende Thread die Methode wieder verlassen hat. Der Nachteil dieser Variante liegt aller-
	dings darin, dass auch alle anderen Zugriffe auf synchronized Methoden der Klasse LazyInitRaceCondition
	blockiert werden. Die bessere Lösung wäre hier die Verwendung eines Lock Objektes und eines synchronized
	Blockes, durch welchen der Zugriff auf die Instanzvariable geschützt wird.
	
	Die dritte (und eleganteste) Möglichkeit ist die Verwendung eines sogenannten 'LazyHolders'. Dies ist
	eine private, statische Klasse, welche die Instanz des ExpensiveObects als statische Variable enthält.
	Bei dieser Methode wird der Erstellungszeitpunkt an die JVM delegiert und diese garantiert, dass die
	Instanz	beim ersten Zugriff auf das Objekt erstellt wird.
	
c)	Ich würde sagen, dass die Implementierung der Message passing Aufgabe vom letzten Übungsblatt zum 
	größten Teil Thread-safe ist, da alle öffentlichen Methoden entweder synchronized sind, oder einen
	synchronized Block enthalten, in dem der Zugriff auf sensible Bereiche gesichert wird.

Aufgabe 2:
==========

	Ausführung: java -jar ex2.jar
				
a)	Die 'gefährliche' Implementierung erstellt eine anonyme Listener Instanz direkt im Konstruktor.
	Diese Instanz wird dan an die EventSource übergeben. Sie enthält aber eine versteckte Referenz auf
	das erzeugende Objekt. Da dies alles im Konstruktor passiert, wird dadurch eine Referenz auf ein noch
	nicht fertig erzeugtes Objekt weitergegeben.
	
b,c,d,e ) Siehe Implementierung!

f)	Immutable Klassen haben den Vorteil, dass sie von Haus aus threadsafe sind, da hier keine veränderbaren
	Parameter vor gleichzeitigem Zugriff geschützt werden müssen, da nur gelesen werden kann. 		
				
Aufgabe 3:
==========

	Ausführung: java -jar ex3_not_safe.jar
				java -jar ex3_safe.jar
	
a) 	siehe Implementierung!

b)	Das Timing muss eigentlich überhaupt nicht angepasst werden, damit Probleme auftreten. Sobald mehr als
	ein Setter Thread auf dieselbe NumberRange Instanz zugreifen, treten recht schnell IllegalArgumentExceptions
	auf. Dies liegt daran, dass ein Setter zwar die eigenen Werte 'lower' und 'upper' auf Konsistenz prüfen kann,
	nicht aber die Werte, die bereits von einem anderen Thread gesetzt wurden. Daher ist es sehr leicht möglich,
	dass ein Thread versucht einen 'upper' Wert zu setzen, welcher niedriger ist als der momentan gesetzte 
	'lower' Wert. Das Problem sind aber nicht nur die auftretenden und zu behandelnden Exceptions, sondern es
	ist auch sehr gut möglich, dass keine Exception geworfen wird und das Ergebnis trotzdem falsch ist. Z.B.
	Thread 1 versucht den Wert 'upper' auf 3 zu setzen. Der 'lower' hat momentan den Wert 2. Gleichzeitig ändert
	aber Thread 2 den Wert 'lower' auf 4. Da Thread 1 aber die if-Bedingung bereits passiert hat, befindet sich
	die NumberRange nun in einem inkonsistenten Zustand!
	
c)	Inkonsistente Zustände können leicht verhindert werden, indem die setter methoden in der Klasse NumberRange
	mit dem 'synchronized' Schlüsselwort versehen werden. Dies verhindert allerdings nicht, dass immer noch
	IllegalArgumentExceptions auftreten können, da der Setter Thread die aktuellen Ober- und Untergrenzen nicht
	wissen kann. Dieses Problem kann eigentlich nur behoben werden, wenn die ganze NumberRange Klasse gelockt wird
	bevor ein Thread die Ober- und Untergrenzen setzt.
	
d)	Siehe Implementierung!
	
	